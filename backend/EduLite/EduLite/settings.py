"""
Django settings for EduLite project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_URL = "/media/"

MEDIA_ROOT = BASE_DIR / "media"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY", default="default-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []



# Application definition

INSTALLED_APPS = [
    "daphne", # ASGI server for Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # our apps
    "users",
    "chat",
    "notifications",
    "courses",
    # third-party apps
    "channels",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    'drf_spectacular',
    'drf_spectacular_sidecar',
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "\n%(levelname)s %(name)s: %(message)s"},
        "none": {"format": "%(message)s"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",  # Outputs to stderr by default
            "formatter": "simple",
        },
        "console-tests": {
            "class": "logging.StreamHandler",  # Outputs to stderr by default
            "formatter": "none",
        },
    },
    "loggers": {
        # TESTS WILL  USE THE `console-tests` HANDLER
        # FEEL FREE TO CHANGE THE LOG LEVELS TO DEBUG FOR MORE DETAILS
        # OR TO WARNING TO ONLY SEE FAILURES
        "chat.tests": {
            "handlers": ["console-tests"],
            "level": "DEBUG",
            "propagate": False,
        },
        "users.tests": {
            "handlers": ["console-tests"],
            "level": "DEBUG",
            "propagate": False,
        },

        # --- Channels and Websocket logging ---
        "channels":{
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },

        # log all ASGI events
        "django.channels.server": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "EduLite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "EduLite.asgi.application"

# Django Channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

WSGI_APPLICATION = "EduLite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),  # Default is 5 minutes
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # Default is 1 day
    "ROTATE_REFRESH_TOKENS": True,  # If True, a new refresh token is issued when you use a refresh token.
    "BLACKLIST_AFTER_ROTATION": True,  # If True, old refresh tokens are blacklisted after rotation. Requires an additional app for blacklisting.
    "UPDATE_LAST_LOGIN": False,  # Default is False. If True, updates the user's last_login field.
    "ALGORITHM": "HS256",  # Default
    "SIGNING_KEY": SECRET_KEY,  # Uses your Django SECRET_KEY by default.
    "VERIFYING_KEY": None,  # Default
    "AUDIENCE": None,  # Default
    "ISSUER": None,  # Default
    "JWK_URL": None,  # Default
    "LEEWAY": 0,  # Default
    "AUTH_HEADER_TYPES": (
        "Bearer",
    ),  # Default is ('Bearer',). Defines the prefix for the Authorization header.
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # Default
    "USER_ID_FIELD": "id",  # Default
    "USER_ID_CLAIM": "user_id",  # Default
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),  # Default
    "TOKEN_TYPE_CLAIM": "token_type",  # Default
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",  # Default
    "JTI_CLAIM": "jti",  # Default
}

BLOCKED_EMAIL_DOMAINS = ["example.com", "test.com"]  # For testing

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# Allow credentials to be included in CORS requests
CORS_ALLOW_CREDENTIALS = True

# Specify which headers can be used during the actual request
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Email Configuration - Development Only (Console Backend)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 1025  # Not used by console backend but safe to include
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
DEFAULT_FROM_EMAIL = 'EduLite <noreply@edulite.local>'
FRONTEND_URL = 'http://127.0.0.1:8000/api'

SPECTACULAR_SETTINGS = {
    'TITLE': 'EduLite API',
    'DESCRIPTION': 'API documentation for EduLite',
    'SERVE_INCLUDE_SCHEMA': False,
    # configure sidecar for serving static files
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}
